openapi: 3.0.3
info:
  title: Swagger Bike Reservation system - OpenAPI 3.0
  version: 1.0.
  description: |-
    This is the API doucmentation for an eBike Rental system  based on the OpenAPI 3.0 specification.  
    
    Some useful links:
    - [The Backend API in Github](https://github.com/RandomGuy55555/eBikeApi)
    - [The Frontend App in Github](https://github.com/RandomGuy55555/eBikeUI)
  
tags:
  - name: bikes
    description: Access to all bikes in the system
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: reservation
    description: Operations about user
paths:
  /bikes/:
    get:
      tags:
        - bikes
      summary: Returns all bikes from the database
      description: Returns an array of bikes from the database
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Bike'
  /reservation:
    get:
      tags:
        - reservation
      summary: Returns all rented bikes from a user. Even though a user can only rent one bike at a time, for quick future changes to multiple bikes, the preparations have been made (array instead of single object).
      description: Returns an array of rented bikes from the database
      parameters:
        - name: username
          in: query
          description: To retrieve the reservation of a user, his/her username needs to be provided
          required: true
          explode: true
          schema:
            type: string
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Bike'
  
  /reservation/:
    post:
      tags:
        - reservation
      summary: Creates a bike reservation
      description: Creates a bike reservation and returns the reservation as an uuid string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBikeReservationRequestObject'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: "3975ec8a-7a2b-4053-885c-f43670a57732"
  
  /reservation/bike/{bikeId}:
    delete:
      tags:
        - reservation
      summary: Deletes the reservation from a bike
      description: Used to return a rented bike
      parameters:
        - name: bikeId
          in: path
          description: ID of bike
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: Successfully deleted reservation
  
components:
  schemas:
    Bike:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          description: Name of the Bike
          type: string
          example: Henry
        latitude:
          description: latitude of the bike. Saved in the database as double precision but returned as string in JSON
          type: string
          example: 50.119504
        longitude:
          description: longitude of the bike. Saved in the database as double precision but returned as string in JSON
          type: string
          example: 8.638137
        rented:
          type: boolean
          description: A boolean value which shows if the bike is rented or not. True means that the bike is not available for rent
          example: false
    GetBikeReservationRequestObject:
      type: object
      properties:
        username:
          type: string
          example: userOne
        bikeId:
          type: integer
          format: int64
          example: 10
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string